1. Into
- Go is modern, fast, and comes with a powerful standard library.
- Go has concurrency built-in.
- Go uses interfaces as the building blocks of code reuse.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Notes:
- Go provides a flexible hierarchy-free type system that enables code reuse with minimal refactoring overhead.
Embed types to reuse functionality in a design pattern called composition.

- duck typing—if it quacks like a duck, then it can be a duck

=======================================================================================================================================================================================================================================================================================================================================================================

2. Quick start
- Every code file belongs to a package, and that package name should be the same as the folder the code file exists in.
- Go provides several ways to declare and initialize variables. If the value of a variable isn’t explicitly initialized, the compiler will initialize the variable to its zero value.
- Pointers are a way of sharing data across functions and goroutines.
- Concurrency and synchronization are accomplished by launching goroutines
and using channels.
- Go provides built-in functions to support using Go’s internal data structures.
- The standard library contains many packages that will let you do some powerful
things.
- Interfaces in Go allow you to write generic code and frameworks.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Notes:
- All code files in a folder must use the same package name, and it’s common practice to name the package after the folder.

- import _ package-name
The blank identifier allows the compiler to accept the import and call any init functions that can be found in the different code files within that package.

- Identifiers are either exported or unexported from a package.
An exported identifier can be directly accessed by code in other packages when the respective package is imported.
These identifiers start with a capital letter. Unexported identifi- ers start with a lowercase letter and can’t be directly accessed by code in other pack- ages.

- make(map[string]Matcher)
If you don’t make the map first and assign it to your variable, you’ll receive errors when you try to use the map variable.
This is because the zero value for a map variable is nil.

- All variables are initialized to their zero value.
For numeric types, that value is 0;
for strings it’s an empty string;
for Booleans it’s false;
and for pointers, the zero value is nil.
In the case of a struct, the zero value would apply to all the different fields in the struct.

- a,b,err := myFunc()
If an error occurs, never trust the other values being returned from the function.
They should always be ignored, or else you run the risk of the code generating more errors or panics.

- Channels are also a reference type in Go like maps and slices,
but channels implement a queue of typed values that are used to communicate data between goroutines.
Channels provide inherent synchronization mechanisms to make communication safe.

- goroutine is a function that’s launched to run independently from other functions in the program.
// Launch a goroutine for each feed to find the results.
for _, feed := range feeds {

  // Launch the goroutine to perform the search.
  go func(matcher Matcher, feed *Feed) {
      Match(matcher, feed, searchTerm, results)
      waitGroup.Done()
  }(matcher, feed)
}
In our for range loop, we launch an anonymous function as a goroutine for each feed.
This allows each feed to be processed independently in a concurrent fashion.

- Pointer variables are great for sharing variables between functions.
They allow functions to access and change the state of a variable that was declared within the scope of a different function and possibly a different goroutine.

- In Go, all variables are passed by value.
Since the value of a pointer variable is the address to the memory being pointed to,
passing pointer variables between functions is still considered a pass by value.
*There is no pass by reference like in Java

- Naming convention in Go when naming interfaces.
If the interface type contains only one method, the name of the interface ends with the er suffix.
When multiple methods are declared within an interface type, the name of the interface should relate to its general behavior.

- use the ampersand (&) operator to get the address

=======================================================================================================================================================================================================================================================================================================================================================================


3. Packaging and tooling
- Packages are the basic unit of code organization in Go.
- Your GOPATH determines on disk where Go source code is saved, compiled, and
installed.
- You can set your GOPATH for each different project, keeping all of your source
and dependencies separate.
- The go tool is your best friend when working from the command line.
- You can use packages created by other people by using go get to fetch and
install them in your GOPATH.
- It’s easy to create packages for others to use if you host them on a public source
code repository and follow a few simple rules.
- Go was designed with code sharing as a central driving feature of the language.
- It’s recommended that you use vendoring to manage dependencies.
- There are several community-developed tools for dependency management
such as godep, vendor, and gb.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Notes:
- All .go files in a single directory must declare the same package name.
For example from the net/http package, all the files contained within the http directory are a part of the http package.

- Keep in mind that a unique name is not required, because you import the package using its full path.
Your package name is used as the default name when your package is imported, but it can be overridden.
This is beneficial when you need to import multiple packages with the same name.

import (
  "fmt"
  myfmt "mylib/fmt"
)

- init.
Each package has the ability to provide as many init functions as necessary to be invoked at the beginning of execution time.
All the init functions that are discovered by the compiler are scheduled to be executed prior to the main function being executed.
The init functions are great for setting up packages, initializing variables, or performing any other bootstrapping you may need prior to the program running.

- You can omit the filename of the source code file that you want to build, and the go tool will default to the current package:
go build

- package can be specified directly:
go build github.com/goinaction/code/chapter3/wordcount

- the following command will build every package under the chapter3 directory. ... means any string
go build github.com/goinaction/code/chapter3/...

- go vet command will check your code for common errors.

- go fmt command will automatically format the source code files you specify and save them.

- By adding comments directly above the identifiers you document it.
This works for packages, functions, types, and global variables.
Comments can be started using either two slashes, or using the slash-asterisk style.

=======================================================================================================================================================================================================================================================================================================================================================================


4. Arrays, slices, and maps
- Arrays are the building blocks for both slices and maps.
- Slices are the idiomatic way in Go you work with collections of data. Maps are
the way you work with key/value pairs of data.
- The built-in function make allows you to create slices and maps with initial
length and capacity. Slice and map literals can be used as well and support set-
ting initial values for use.
- Slices have a capacity restriction, but can be extended using the built-in func-
tion append.
- Maps don’t have a capacity or any restriction on growth.
- The built-in function len can be used to retrieve the length of a slice or map.
- The built-in function cap only works on slices.
- Through the use of composition, you can create multidimensional arrays and
slices. You can also create maps with values that are slices and other maps. A
slice can’t be used as a map key.
- Passing a slice or map to a function is cheap and doesn’t make a copy of the
underlying data structure.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Notes:
- Slices are flexible in terms of growth because they have their own built-in function called append,
which can grow a slice quickly with efficiency.

=======================================================================================================================================================================================================================================================================================================================================================================


5. Go's type system
- struct.
Struct types are declared by composing a fixed set of unique fields.
Each field in a struct is declared with a known type, which could be a built-in type or another user-defined type.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Notes:

=======================================================================================================================================================================================================================================================================================================================================================================


6. Concurrency


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Notes:

- Concurrency in Go is the ability for functions to run independent of each other.
When a function is created as a goroutine, it’s treated as an independent unit of work that gets scheduled and then executed on an available logical processor.

- Concurrency synchronization comes from a paradigm called communicating sequential processes or CSP.
CSP is a message-passing model that works by communicating data between goroutines instead of locking data to synchronize access.
The key data type for synchronizing and passing messages between goroutines is called a channel.

- There’s no restriction built into the scheduler for the number of logical processors that can be created.
But the runtime limits each program to a maximum of 10,000 threads by default.
This value can be changed by calling the SetMaxThreads function from the runtime/debug package.
If any program attempts to use more threads, the program crashes.

- Concurrency is not parallelism.
Parallelism can only be achieved when multiple pieces of code are executing simultaneously against different physical processors.
Parallelism is about doing a lot of things at once.
Concurrency is about managing a lot of things at once.

- If you want to run goroutines in parallel, you must use more than one logical processor.
When there are multiple logical processors, the scheduler will evenly distribute goroutines between the logical processors.
This will result in goroutines running on different threads.

- Once the two anonymous functions are created as goroutines, the code in main keeps running.
This means that the main function can return before the goroutines complete their work.
If this happens, the program will terminate before the gorou- tines have a chance to run.

- Based on the internal algorithms of the scheduler, a running goroutine can be stopped and rescheduled to run again before it finishes its work.
The scheduler does this to prevent any single goroutine from holding the logical processor hostage.
It will stop the currently running goroutine and give another runnable goroutine a chance to run.


=======================================================================================================================================================================================================================================================================================================================================================================


7. Concurrency patterns


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Notes:

=======================================================================================================================================================================================================================================================================================================================================================================


8. Standard library

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Notes:

=======================================================================================================================================================================================================================================================================================================================================================================


9. Testing and benchmarking
- Testing is built into the language and Go provides all the tooling you need.
- The go test tool is used to run tests.
- Test files always end with the _test.go file name.
- Table tests are a great way to leverage a single test function to test multiple values.
- Examples are both tests and documentation for a package.
- Benchmarks provide a mechanism to reveal the performance of code.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Notes:
